// <auto-generated />
using System;
using E_commerce_website.onlineDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace E_commerce_website.Migrations
{
    [DbContext(typeof(OnlineshoppingContext))]
    partial class OnlineshoppingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("E_commerce_website.Models.CartItem", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("id", "UserID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("E_commerce_website.Models.Option", b =>
                {
                    b.Property<int>("OptionID")
                        .HasColumnType("int");

                    b.Property<int>("OptionGroupID")
                        .HasColumnType("int");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OptionID");

                    b.HasIndex("OptionGroupID");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("E_commerce_website.Models.OptionGroup", b =>
                {
                    b.Property<int>("OptionGroupID")
                        .HasColumnType("int");

                    b.Property<string>("OptionGroupName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OptionGroupID");

                    b.ToTable("OptionGroups");
                });

            modelBuilder.Entity("E_commerce_website.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderAddress")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int>("OrderAmount")
                        .HasColumnType("int");

                    b.Property<string>("OrderCity")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("OrderCountry")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date");

                    b.Property<string>("OrderEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OrderPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("OrderShiped")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("OrderStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int?>("orderTrakingNumber")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("E_commerce_website.Models.OrderDetail", b =>
                {
                    b.Property<int>("DetailID")
                        .HasColumnType("int");

                    b.Property<string>("DetailName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DetailOrderID")
                        .HasColumnType("int");

                    b.Property<int>("DetailProductID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quanity")
                        .HasColumnType("int");

                    b.HasKey("DetailID")
                        .HasName("PK_OrderDetails_1");

                    b.HasIndex("DetailOrderID");

                    b.HasIndex("DetailProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("E_commerce_website.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProductLongDes")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("float");

                    b.Property<string>("ProductShortDes")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ProductStock")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProductUpdateDate")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double?>("ProductWeight")
                        .HasColumnType("float");

                    b.Property<int?>("VendorID")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("ProductCategoryID");

                    b.HasIndex("VendorID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("E_commerce_website.Models.ProductCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryID");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("E_commerce_website.Models.ProductOption", b =>
                {
                    b.Property<int>("ProductOptionID")
                        .HasColumnType("int");

                    b.Property<int>("OptionID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ProductOptionID");

                    b.HasIndex("OptionID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductOptions");
                });

            modelBuilder.Entity("E_commerce_website.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserAddress2")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserCity")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("UserCountry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<byte>("UserEmailVerfied")
                        .HasColumnType("tinyint");

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserIP")
                        .HasColumnType("int");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("UserRegisterDate")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserVerficationCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("E_commerce_website.Models.Vendor", b =>
                {
                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("VendorID");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("E_commerce_website.Models.CartItem", b =>
                {
                    b.HasOne("E_commerce_website.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_CartItems_Products");

                    b.HasOne("E_commerce_website.Models.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_CartItems_Users")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_commerce_website.Models.Option", b =>
                {
                    b.HasOne("E_commerce_website.Models.OptionGroup", "OptionGroup")
                        .WithMany("Options")
                        .HasForeignKey("OptionGroupID")
                        .HasConstraintName("FK_Options_OptionGroups")
                        .IsRequired();

                    b.Navigation("OptionGroup");
                });

            modelBuilder.Entity("E_commerce_website.Models.Order", b =>
                {
                    b.HasOne("E_commerce_website.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .HasConstraintName("FK_Orders_Users")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_commerce_website.Models.OrderDetail", b =>
                {
                    b.HasOne("E_commerce_website.Models.Order", "DetailOrder")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DetailOrderID")
                        .HasConstraintName("FK_OrderDetails_Orders")
                        .IsRequired();

                    b.HasOne("E_commerce_website.Models.Product", "DetailProduct")
                        .WithMany("OrderDetails")
                        .HasForeignKey("DetailProductID")
                        .HasConstraintName("FK_OrderDetails_Products")
                        .IsRequired();

                    b.Navigation("DetailOrder");

                    b.Navigation("DetailProduct");
                });

            modelBuilder.Entity("E_commerce_website.Models.Product", b =>
                {
                    b.HasOne("E_commerce_website.Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryID")
                        .HasConstraintName("FK_Products_ProductCategories")
                        .IsRequired();

                    b.HasOne("E_commerce_website.Models.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorID")
                        .HasConstraintName("FK_Products_Vendor");

                    b.Navigation("ProductCategory");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("E_commerce_website.Models.ProductOption", b =>
                {
                    b.HasOne("E_commerce_website.Models.Option", "Option")
                        .WithMany("ProductOptions")
                        .HasForeignKey("OptionID")
                        .HasConstraintName("FK_ProductOptions_Options")
                        .IsRequired();

                    b.HasOne("E_commerce_website.Models.Product", "Product")
                        .WithMany("ProductOptions")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_ProductOptions_Products")
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_commerce_website.Models.Option", b =>
                {
                    b.Navigation("ProductOptions");
                });

            modelBuilder.Entity("E_commerce_website.Models.OptionGroup", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("E_commerce_website.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("E_commerce_website.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductOptions");
                });

            modelBuilder.Entity("E_commerce_website.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_commerce_website.Models.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("E_commerce_website.Models.Vendor", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
