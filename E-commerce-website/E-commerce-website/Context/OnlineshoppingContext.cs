// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using E_commerce_website.Models;

namespace E_commerce_website.Context
{
    public partial class OnlineshoppingContext : DbContext
    {
        public OnlineshoppingContext()
        {
        }

        public OnlineshoppingContext(DbContextOptions<OnlineshoppingContext> options)
            : base(options)
        {
        }

        public virtual DbSet<CartItem> CartItems { get; set; }
        public virtual DbSet<CartItemsOption> CartItemsOptions { get; set; }
        public virtual DbSet<Option> Options { get; set; }
        public virtual DbSet<OptionGroup> OptionGroups { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<OrderItemsOption> OrderItemsOptions { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductOption> ProductOptions { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }

    

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CartItem>(entity =>
            {
                entity.HasKey(e => new { e.UserID, e.ProductID });

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.CartItems)
                    .HasForeignKey(d => d.ProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartItems_Products");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CartItems)
                    .HasForeignKey(d => d.UserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartItems_Users");
            });

            modelBuilder.Entity<CartItemsOption>(entity =>
            {
                entity.HasKey(e => new { e.UserID, e.ProductID, e.OptionID })
                    .HasName("PK_CartItemsOptions_1");

                entity.HasOne(d => d.Option)
                    .WithMany(p => p.CartItemsOptions)
                    .HasForeignKey(d => d.OptionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartItemsOptions_Options");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.CartItemsOptions)
                    .HasForeignKey(d => d.ProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartItemsOptions_Products");
            });

            modelBuilder.Entity<Option>(entity =>
            {
                entity.Property(e => e.OptionID).ValueGeneratedOnAdd();

                entity.HasOne(d => d.OptionGroup)
                    .WithMany(p => p.Options)
                    .HasForeignKey(d => d.OptionGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Options_OptionGroups");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.OrderCity).IsFixedLength();

                entity.Property(e => e.OrderCountry).IsFixedLength();

                entity.Property(e => e.ShippingAddress).IsFixedLength();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.UserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Users");
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.HasKey(e => new { e.OrderID, e.ProductID });

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.OrderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetails_Orders");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.ProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetails_Products");
            });

            modelBuilder.Entity<OrderItemsOption>(entity =>
            {
                entity.HasKey(e => new { e.OrderID, e.UserID, e.ProductID, e.OptionID });

                entity.HasOne(d => d.Option)
                    .WithMany(p => p.OrderItemsOptions)
                    .HasForeignKey(d => d.OptionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItemsOptions_Options");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderItemsOptions)
                    .HasForeignKey(d => d.OrderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItemsOptions_Orders");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.OrderItemsOptions)
                    .HasForeignKey(d => d.ProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItemsOptions_Products");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.OrderItemsOptions)
                    .HasForeignKey(d => d.UserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderItemsOptions_Users");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ProductCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_ProductCategories");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.VendorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_Vendor");
            });

            modelBuilder.Entity<ProductCategory>(entity =>
            {
                entity.Property(e => e.CategoryID).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductOption>(entity =>
            {
                entity.HasOne(d => d.Option)
                    .WithMany(p => p.ProductOptions)
                    .HasForeignKey(d => d.OptionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOptions_Options");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductOptions)
                    .HasForeignKey(d => d.ProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOptions_Products");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.UserCity).IsFixedLength();

                entity.Property(e => e.UserEmail).IsFixedLength();
            });

            modelBuilder.Entity<Vendor>(entity =>
            {
                entity.Property(e => e.VendorCountry).IsFixedLength();

                entity.Property(e => e.VendorEmail).IsFixedLength();

                entity.Property(e => e.VendorPassword).IsFixedLength();

                entity.Property(e => e.VendorVerficationCode).IsFixedLength();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}