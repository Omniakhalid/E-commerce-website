// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using E_commerce_website.Models;

namespace E_commerce_website.onlineDbContext
{
    public partial class OnlineshoppingContext : DbContext
    {
        public OnlineshoppingContext()
        {
        }

        public OnlineshoppingContext(DbContextOptions<OnlineshoppingContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Option> Options { get; set; }
        public virtual DbSet<OptionGroup> OptionGroups { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductOption> ProductOptions { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-P84ETB9\\MSSQLSERVER01;Initial Catalog=OnlineShopping;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Option>(entity =>
            {
                entity.Property(e => e.OptionID).ValueGeneratedNever();

                entity.HasOne(d => d.OptionGroup)
                    .WithMany(p => p.Options)
                    .HasForeignKey(d => d.OptionGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Options_OptionGroups");
            });

            modelBuilder.Entity<OptionGroup>(entity =>
            {
                entity.Property(e => e.OptionGroupID).ValueGeneratedNever();
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.OrderID).ValueGeneratedNever();

                entity.Property(e => e.OrderAddress).IsFixedLength();

                entity.Property(e => e.OrderCity).IsFixedLength();

                entity.Property(e => e.OrderCountry).IsFixedLength();

                entity.Property(e => e.ShippingAddress).IsFixedLength();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.UserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Orders_Users");
            });

            modelBuilder.Entity<OrderDetail>(entity =>
            {
                entity.HasKey(e => e.DetailID)
                    .HasName("PK_OrderDetails_1");

                entity.Property(e => e.DetailID).ValueGeneratedNever();

                entity.HasOne(d => d.DetailOrder)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.DetailOrderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetails_Orders");

                entity.HasOne(d => d.DetailProduct)
                    .WithMany(p => p.OrderDetails)
                    .HasForeignKey(d => d.DetailProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OrderDetails_Products");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.ProductID).ValueGeneratedNever();

                entity.Property(e => e.ProductUpdateDate)
                    .IsRowVersion()
                    .IsConcurrencyToken();

                entity.HasOne(d => d.ProductCategory)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ProductCategoryID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Products_ProductCategories");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.VendorID)
                    .HasConstraintName("FK_Products_Vendor");
            });

            modelBuilder.Entity<ProductCategory>(entity =>
            {
                entity.Property(e => e.CategoryID).ValueGeneratedNever();
            });

            modelBuilder.Entity<ProductOption>(entity =>
            {
                entity.Property(e => e.ProductOptionID).ValueGeneratedNever();

                entity.HasOne(d => d.Option)
                    .WithMany(p => p.ProductOptions)
                    .HasForeignKey(d => d.OptionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOptions_Options");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductOptions)
                    .HasForeignKey(d => d.ProductID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOptions_Products");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.UserID).ValueGeneratedNever();

                entity.Property(e => e.UserCity).IsFixedLength();

                entity.Property(e => e.UserEmail).IsFixedLength();

                entity.Property(e => e.UserRegisterDate)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Vendor>(entity =>
            {
                entity.Property(e => e.VendorID).ValueGeneratedNever();

                entity.Property(e => e.Email).IsFixedLength();
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}